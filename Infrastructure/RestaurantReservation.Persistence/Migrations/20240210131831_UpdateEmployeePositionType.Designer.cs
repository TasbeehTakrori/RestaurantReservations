// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantReservation.Persistence;

#nullable disable

namespace RestaurantReservation.Application.Migrations
{
    [DbContext(typeof(RestaurantReservationDbContext))]
    [Migration("20240210131831_UpdateEmployeePositionType")]
    partial class UpdateEmployeePositionType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "Myrna_Hansen@hotmail.com",
                            FirstName = "Al",
                            LastName = "Carter",
                            PhoneNumber = "(297) 403-8048"
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "Russel44@yahoo.com",
                            FirstName = "Santina",
                            LastName = "Deckow",
                            PhoneNumber = "(595) 314-3206"
                        },
                        new
                        {
                            CustomerId = 3,
                            Email = "Ida_Ledner6@hotmail.com",
                            FirstName = "Marlee",
                            LastName = "Wiegand",
                            PhoneNumber = "208-991-8033 x697"
                        },
                        new
                        {
                            CustomerId = 4,
                            Email = "Rahsaan_Marks@gmail.com",
                            FirstName = "Jean",
                            LastName = "Altenwerth",
                            PhoneNumber = "1-848-883-9492 x9300"
                        },
                        new
                        {
                            CustomerId = 5,
                            Email = "Camryn_Jenkins75@gmail.com",
                            FirstName = "Georgette",
                            LastName = "Dach",
                            PhoneNumber = "482-367-7930 x6290"
                        },
                        new
                        {
                            CustomerId = 6,
                            Email = "Mathew.Schmitt80@gmail.com",
                            FirstName = "Eryn",
                            LastName = "Haley",
                            PhoneNumber = "(611) 215-1265"
                        },
                        new
                        {
                            CustomerId = 7,
                            Email = "Anissa_Bode@gmail.com",
                            FirstName = "Florida",
                            LastName = "Kessler",
                            PhoneNumber = "463.522.0185 x023"
                        },
                        new
                        {
                            CustomerId = 8,
                            Email = "Lexi43@yahoo.com",
                            FirstName = "Mervin",
                            LastName = "Mayer",
                            PhoneNumber = "1-449-257-1523 x428"
                        },
                        new
                        {
                            CustomerId = 9,
                            Email = "Janie_Batz@hotmail.com",
                            FirstName = "Bernardo",
                            LastName = "Murray",
                            PhoneNumber = "915-847-1249 x474"
                        },
                        new
                        {
                            CustomerId = 10,
                            Email = "Karen76@yahoo.com",
                            FirstName = "Twila",
                            LastName = "Cummerata",
                            PhoneNumber = "726-372-2289 x791"
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            FirstName = "Darrel",
                            LastName = "McCullough",
                            Position = 0,
                            RestaurantId = 4
                        },
                        new
                        {
                            EmployeeId = 2,
                            FirstName = "Angelo",
                            LastName = "Klein",
                            Position = 0,
                            RestaurantId = 1
                        },
                        new
                        {
                            EmployeeId = 3,
                            FirstName = "Jeannie",
                            LastName = "Mills",
                            Position = 1,
                            RestaurantId = 5
                        },
                        new
                        {
                            EmployeeId = 4,
                            FirstName = "Rafael",
                            LastName = "Hamill",
                            Position = 3,
                            RestaurantId = 2
                        },
                        new
                        {
                            EmployeeId = 5,
                            FirstName = "Steven",
                            LastName = "Johnson",
                            Position = 4,
                            RestaurantId = 5
                        },
                        new
                        {
                            EmployeeId = 6,
                            FirstName = "Marion",
                            LastName = "Swift",
                            Position = 1,
                            RestaurantId = 4
                        },
                        new
                        {
                            EmployeeId = 7,
                            FirstName = "Kristy",
                            LastName = "Blanda",
                            Position = 1,
                            RestaurantId = 3
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.EmployeesWithRestaurantDetails", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("EmployeesWithRestaurantDetails");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuItemId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("MenuItemId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            MenuItemId = 1,
                            Description = "Ut id in et aut quo eos.",
                            Name = "Practical Granite Chair",
                            Price = 84.90m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 2,
                            Description = "Quis illo et inventore nemo officia et aut recusandae.",
                            Name = "Unbranded Granite Soap",
                            Price = 90.16m,
                            RestaurantId = 5
                        },
                        new
                        {
                            MenuItemId = 3,
                            Description = "Porro officia aut consequuntur placeat quod temporibus voluptatem culpa fugiat.",
                            Name = "Unbranded Plastic Pants",
                            Price = 62.00m,
                            RestaurantId = 5
                        },
                        new
                        {
                            MenuItemId = 4,
                            Description = "Et provident sunt pariatur nihil.",
                            Name = "Practical Steel Shirt",
                            Price = 57.48m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 5,
                            Description = "Perspiciatis excepturi architecto vel eaque est.",
                            Name = "Intelligent Soft Hat",
                            Price = 87.91m,
                            RestaurantId = 3
                        },
                        new
                        {
                            MenuItemId = 6,
                            Description = "Vitae error illo ut et.",
                            Name = "Tasty Concrete Shoes",
                            Price = 60.55m,
                            RestaurantId = 5
                        },
                        new
                        {
                            MenuItemId = 7,
                            Description = "Eaque commodi quia.",
                            Name = "Awesome Plastic Cheese",
                            Price = 41.41m,
                            RestaurantId = 4
                        },
                        new
                        {
                            MenuItemId = 8,
                            Description = "Odio rerum qui et sit.",
                            Name = "Licensed Rubber Ball",
                            Price = 33.14m,
                            RestaurantId = 4
                        },
                        new
                        {
                            MenuItemId = 9,
                            Description = "Non minus quam aspernatur iste reprehenderit voluptatem culpa.",
                            Name = "Tasty Soft Tuna",
                            Price = 74.44m,
                            RestaurantId = 3
                        },
                        new
                        {
                            MenuItemId = 10,
                            Description = "Aut consequuntur nihil in animi quia.",
                            Name = "Refined Frozen Keyboard",
                            Price = 31.47m,
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            EmployeeId = 4,
                            OrderDate = new DateTime(2024, 2, 10, 4, 30, 36, 942, DateTimeKind.Local).AddTicks(4652),
                            ReservationId = 6
                        },
                        new
                        {
                            OrderId = 2,
                            EmployeeId = 6,
                            OrderDate = new DateTime(2024, 2, 10, 0, 59, 31, 477, DateTimeKind.Local).AddTicks(4214),
                            ReservationId = 1
                        },
                        new
                        {
                            OrderId = 3,
                            EmployeeId = 3,
                            OrderDate = new DateTime(2024, 2, 10, 8, 36, 38, 836, DateTimeKind.Local).AddTicks(7392),
                            ReservationId = 7
                        },
                        new
                        {
                            OrderId = 4,
                            EmployeeId = 2,
                            OrderDate = new DateTime(2024, 2, 10, 4, 49, 21, 95, DateTimeKind.Local).AddTicks(5736),
                            ReservationId = 1
                        },
                        new
                        {
                            OrderId = 5,
                            EmployeeId = 2,
                            OrderDate = new DateTime(2024, 2, 9, 23, 28, 35, 327, DateTimeKind.Local).AddTicks(4572),
                            ReservationId = 10
                        },
                        new
                        {
                            OrderId = 6,
                            EmployeeId = 1,
                            OrderDate = new DateTime(2024, 2, 10, 10, 3, 29, 241, DateTimeKind.Local).AddTicks(406),
                            ReservationId = 4
                        },
                        new
                        {
                            OrderId = 7,
                            EmployeeId = 3,
                            OrderDate = new DateTime(2024, 2, 9, 19, 47, 20, 614, DateTimeKind.Local).AddTicks(2893),
                            ReservationId = 2
                        },
                        new
                        {
                            OrderId = 8,
                            EmployeeId = 6,
                            OrderDate = new DateTime(2024, 2, 9, 21, 46, 53, 73, DateTimeKind.Local).AddTicks(3591),
                            ReservationId = 9
                        },
                        new
                        {
                            OrderId = 9,
                            EmployeeId = 7,
                            OrderDate = new DateTime(2024, 2, 9, 15, 43, 1, 2, DateTimeKind.Local).AddTicks(468),
                            ReservationId = 4
                        },
                        new
                        {
                            OrderId = 10,
                            EmployeeId = 1,
                            OrderDate = new DateTime(2024, 2, 10, 14, 43, 13, 513, DateTimeKind.Local).AddTicks(1183),
                            ReservationId = 1
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 1,
                            MenuItemId = 9,
                            OrderId = 8,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 2,
                            MenuItemId = 8,
                            OrderId = 10,
                            Quantity = 5
                        },
                        new
                        {
                            OrderItemId = 3,
                            MenuItemId = 9,
                            OrderId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 4,
                            MenuItemId = 9,
                            OrderId = 10,
                            Quantity = 3
                        },
                        new
                        {
                            OrderItemId = 5,
                            MenuItemId = 8,
                            OrderId = 9,
                            Quantity = 3
                        },
                        new
                        {
                            OrderItemId = 6,
                            MenuItemId = 7,
                            OrderId = 6,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 7,
                            MenuItemId = 8,
                            OrderId = 9,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 8,
                            MenuItemId = 7,
                            OrderId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 9,
                            MenuItemId = 4,
                            OrderId = 4,
                            Quantity = 3
                        },
                        new
                        {
                            OrderItemId = 10,
                            MenuItemId = 2,
                            OrderId = 4,
                            Quantity = 3
                        },
                        new
                        {
                            OrderItemId = 11,
                            MenuItemId = 2,
                            OrderId = 5,
                            Quantity = 5
                        },
                        new
                        {
                            OrderItemId = 12,
                            MenuItemId = 7,
                            OrderId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 13,
                            MenuItemId = 3,
                            OrderId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 14,
                            MenuItemId = 9,
                            OrderId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 15,
                            MenuItemId = 4,
                            OrderId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            OrderItemId = 16,
                            MenuItemId = 3,
                            OrderId = 3,
                            Quantity = 5
                        },
                        new
                        {
                            OrderItemId = 17,
                            MenuItemId = 2,
                            OrderId = 10,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 18,
                            MenuItemId = 3,
                            OrderId = 4,
                            Quantity = 4
                        },
                        new
                        {
                            OrderItemId = 19,
                            MenuItemId = 8,
                            OrderId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 20,
                            MenuItemId = 7,
                            OrderId = 4,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PartySize")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TableId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            CustomerId = 3,
                            PartySize = 15,
                            ReservationDate = new DateTime(2024, 4, 26, 15, 7, 2, 900, DateTimeKind.Local).AddTicks(9828),
                            RestaurantId = 4,
                            TableId = 2
                        },
                        new
                        {
                            ReservationId = 2,
                            CustomerId = 7,
                            PartySize = 17,
                            ReservationDate = new DateTime(2024, 2, 23, 23, 33, 8, 576, DateTimeKind.Local).AddTicks(251),
                            RestaurantId = 1,
                            TableId = 7
                        },
                        new
                        {
                            ReservationId = 3,
                            CustomerId = 4,
                            PartySize = 16,
                            ReservationDate = new DateTime(2024, 6, 8, 13, 14, 26, 164, DateTimeKind.Local).AddTicks(5590),
                            RestaurantId = 4,
                            TableId = 4
                        },
                        new
                        {
                            ReservationId = 4,
                            CustomerId = 7,
                            PartySize = 2,
                            ReservationDate = new DateTime(2024, 6, 20, 16, 36, 3, 33, DateTimeKind.Local).AddTicks(1110),
                            RestaurantId = 1,
                            TableId = 1
                        },
                        new
                        {
                            ReservationId = 5,
                            CustomerId = 9,
                            PartySize = 9,
                            ReservationDate = new DateTime(2024, 6, 10, 22, 27, 14, 513, DateTimeKind.Local).AddTicks(5974),
                            RestaurantId = 5,
                            TableId = 3
                        },
                        new
                        {
                            ReservationId = 6,
                            CustomerId = 4,
                            PartySize = 15,
                            ReservationDate = new DateTime(2024, 6, 25, 16, 45, 59, 823, DateTimeKind.Local).AddTicks(207),
                            RestaurantId = 3,
                            TableId = 10
                        },
                        new
                        {
                            ReservationId = 7,
                            CustomerId = 1,
                            PartySize = 11,
                            ReservationDate = new DateTime(2024, 8, 20, 14, 20, 2, 374, DateTimeKind.Local).AddTicks(6884),
                            RestaurantId = 1,
                            TableId = 5
                        },
                        new
                        {
                            ReservationId = 8,
                            CustomerId = 2,
                            PartySize = 18,
                            ReservationDate = new DateTime(2025, 1, 24, 3, 3, 55, 572, DateTimeKind.Local).AddTicks(3648),
                            RestaurantId = 2,
                            TableId = 5
                        },
                        new
                        {
                            ReservationId = 9,
                            CustomerId = 9,
                            PartySize = 17,
                            ReservationDate = new DateTime(2024, 2, 11, 11, 56, 21, 11, DateTimeKind.Local).AddTicks(6593),
                            RestaurantId = 3,
                            TableId = 7
                        },
                        new
                        {
                            ReservationId = 10,
                            CustomerId = 1,
                            PartySize = 11,
                            ReservationDate = new DateTime(2025, 1, 16, 2, 26, 46, 496, DateTimeKind.Local).AddTicks(4348),
                            RestaurantId = 2,
                            TableId = 8
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.ReservationsDetails", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartySize")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("ReservationsDetails");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            Address = "8221 Jakob Forks, East Arvelside, China",
                            EndTime = new TimeOnly(21, 0, 0),
                            Name = "Waters, Kuhn and Langworth",
                            PhoneNumber = "849.543.8814",
                            StartTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            RestaurantId = 2,
                            Address = "007 Witting Forges, Lake Jovaniville, Bhutan",
                            EndTime = new TimeOnly(22, 0, 0),
                            Name = "Zieme - Hammes",
                            PhoneNumber = "(272) 876-9546 x275",
                            StartTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            RestaurantId = 3,
                            Address = "911 Freddie Overpass, Goldnertown, Denmark",
                            EndTime = new TimeOnly(21, 0, 0),
                            Name = "Stroman, McDermott and Heaney",
                            PhoneNumber = "457-441-4234",
                            StartTime = new TimeOnly(6, 0, 0)
                        },
                        new
                        {
                            RestaurantId = 4,
                            Address = "5890 Melvin Court, Wilbertport, Libyan Arab Jamahiriya",
                            EndTime = new TimeOnly(22, 0, 0),
                            Name = "Kessler, Greenholt and Schultz",
                            PhoneNumber = "378-874-6693",
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            RestaurantId = 5,
                            Address = "3083 Clement Spurs, Kailynmouth, Martinique",
                            EndTime = new TimeOnly(22, 0, 0),
                            Name = "O'Connell - Goodwin",
                            PhoneNumber = "517-794-8743",
                            StartTime = new TimeOnly(8, 0, 0)
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Capacity = 8,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 2,
                            Capacity = 8,
                            RestaurantId = 5
                        },
                        new
                        {
                            TableId = 3,
                            Capacity = 6,
                            RestaurantId = 3
                        },
                        new
                        {
                            TableId = 4,
                            Capacity = 8,
                            RestaurantId = 2
                        },
                        new
                        {
                            TableId = 5,
                            Capacity = 8,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 6,
                            Capacity = 8,
                            RestaurantId = 3
                        },
                        new
                        {
                            TableId = 7,
                            Capacity = 2,
                            RestaurantId = 5
                        },
                        new
                        {
                            TableId = 8,
                            Capacity = 6,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 9,
                            Capacity = 7,
                            RestaurantId = 2
                        },
                        new
                        {
                            TableId = 10,
                            Capacity = 7,
                            RestaurantId = 2
                        },
                        new
                        {
                            TableId = 11,
                            Capacity = 3,
                            RestaurantId = 3
                        },
                        new
                        {
                            TableId = 12,
                            Capacity = 8,
                            RestaurantId = 5
                        },
                        new
                        {
                            TableId = 13,
                            Capacity = 2,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 14,
                            Capacity = 5,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 15,
                            Capacity = 6,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 16,
                            Capacity = 8,
                            RestaurantId = 3
                        },
                        new
                        {
                            TableId = 17,
                            Capacity = 7,
                            RestaurantId = 5
                        },
                        new
                        {
                            TableId = 18,
                            Capacity = 2,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 19,
                            Capacity = 8,
                            RestaurantId = 4
                        },
                        new
                        {
                            TableId = 20,
                            Capacity = 3,
                            RestaurantId = 2
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Employee", b =>
                {
                    b.HasOne("RestaurantReservation.Application.Entities.Restaurant", "Restaurant")
                        .WithMany("Employees")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.MenuItem", b =>
                {
                    b.HasOne("RestaurantReservation.Application.Entities.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Order", b =>
                {
                    b.HasOne("RestaurantReservation.Application.Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Application.Entities.Reservation", "Reservation")
                        .WithMany("Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.OrderItem", b =>
                {
                    b.HasOne("RestaurantReservation.Application.Entities.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Application.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Reservation", b =>
                {
                    b.HasOne("RestaurantReservation.Application.Entities.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Application.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Application.Entities.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Table", b =>
                {
                    b.HasOne("RestaurantReservation.Application.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Reservation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Restaurant", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("MenuItems");

                    b.Navigation("Reservations");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("RestaurantReservation.Application.Entities.Table", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
